in[]:
import dask.dataframe as dd
import pandas as pd

# uses DASK to check large datasets
TBD = pd.read_csv('TripsByDistance.csv')
TFD = pd.read_csv('TripsFullData.csv')
# inspects the data
print(TBD.head())
print(TFD.head())

Out[]:
C:\Users\Mahesh\anaconda3\envs\Codes\python.exe "C:\Coding and more\5004CMD CW\Data Acquisition.py" 
      Level        Date  State FIPS  ...             Row ID  Week Month
0  National  01/01/2019         NaN  ...  00-00000-20190101     0     1
1  National  01/02/2019         NaN  ...  00-00000-20190102     0     1
2  National  01/03/2019         NaN  ...  00-00000-20190103     0     1
3  National  01/04/2019         NaN  ...  00-00000-20190104     0     1
4  National  01/05/2019         NaN  ...  00-00000-20190105     0     1

[5 rows x 22 columns]
  Month of Date Week of Date  ...  Trips 50-100 Miles Trips 500+ Miles
0        August      Week 32  ...            19911937          4469346
1        August      Week 32  ...            17819554          4085888
2        August      Week 32  ...            17450413          3369125
3        August      Week 32  ...            17819019          1876445
4        August      Week 32  ...            17469044          4674725

[5 rows x 22 columns]

Process finished with exit code 0

in[]
# converts time columns to appropriate values
TBD["Date"] = pd.to_datetime(TBD["Date"], errors="coerce")
TFD['Date'] = pd.to_datetime(TFD["Date"], errors="coerce")
# handles the missing values by removing the rows/columns with NA values
TBD.dropna(inplace=True)
TFD.dropna(inplace=True)
# counts the unique values in the week column
df = dd.from_pandas(TBD, npartitions=10)
week_count = df["Week"].nunique().compute()
print("Number of unique weeks:", week_count)

Out[]
C:\Users\Mahesh\anaconda3\envs\Codes\python.exe "C:\Coding and more\5004CMD CW\Data Acquisition.py" 
      Level        Date  State FIPS  ...             Row ID  Week Month
0  National  01/01/2019         NaN  ...  00-00000-20190101     0     1
1  National  01/02/2019         NaN  ...  00-00000-20190102     0     1
2  National  01/03/2019         NaN  ...  00-00000-20190103     0     1
3  National  01/04/2019         NaN  ...  00-00000-20190104     0     1
4  National  01/05/2019         NaN  ...  00-00000-20190105     0     1

[5 rows x 22 columns]
  Month of Date Week of Date  ...  Trips 50-100 Miles Trips 500+ Miles
0        August      Week 32  ...            19911937          4469346
1        August      Week 32  ...            17819554          4085888
2        August      Week 32  ...            17450413          3369125
3        August      Week 32  ...            17819019          1876445
4        August      Week 32  ...            17469044          4674725

[5 rows x 22 columns]
Number of unique weeks: 45
        Level       Date  State FIPS  ...             Row ID  Week Month
21061  County 2021-06-06        56.0  ...  56-56045-20210606    23     6
22762  County 2021-06-06         5.0  ...  05-05011-20210606    23     6
22763  County 2021-06-06         5.0  ...  05-05013-20210606    23     6
22764  County 2021-06-06         5.0  ...  05-05015-20210606    23     6
22765  County 2021-06-06         5.0  ...  05-05017-20210606    23     6

[5 rows x 22 columns]
  Month of Date Week of Date  ...  Trips 50-100 Miles Trips 500+ Miles
0        August      Week 32  ...            19911937          4469346
1        August      Week 32  ...            17819554          4085888
2        August      Week 32  ...            17450413          3369125
3        August      Week 32  ...            17819019          1876445
4        August      Week 32  ...            17469044          4674725

[5 rows x 22 columns]

Process finished with exit code 0

In[]
# finding average of people at home and travelled distance of 10-25 miles
avg_homePW = df.groupby(by="Week")["Population Staying at Home"].mean().compute()
print(avg_homePW)
avg_travelDis = df.groupby(by="Week")["Number of Trips 10-25"].mean().compute()
print(avg_travelDis)

Out[]
C:\Users\Mahesh\anaconda3\envs\Codes\python.exe "C:\Coding and more\5004CMD CW\Data Acquisition.py" 
      Level        Date  State FIPS  ...             Row ID  Week Month
0  National  01/01/2019         NaN  ...  00-00000-20190101     0     1
1  National  01/02/2019         NaN  ...  00-00000-20190102     0     1
2  National  01/03/2019         NaN  ...  00-00000-20190103     0     1
3  National  01/04/2019         NaN  ...  00-00000-20190104     0     1
4  National  01/05/2019         NaN  ...  00-00000-20190105     0     1

[5 rows x 22 columns]
  Month of Date Week of Date  ...  Trips 50-100 Miles Trips 500+ Miles
0        August      Week 32  ...            19911937          4469346
1        August      Week 32  ...            17819554          4085888
2        August      Week 32  ...            17450413          3369125
3        August      Week 32  ...            17819019          1876445
4        August      Week 32  ...            17469044          4674725

[5 rows x 22 columns]
Number of unique weeks: 45
        Level       Date  State FIPS  ...             Row ID  Week Month
21061  County 2021-06-06        56.0  ...  56-56045-20210606    23     6
22762  County 2021-06-06         5.0  ...  05-05011-20210606    23     6
22763  County 2021-06-06         5.0  ...  05-05013-20210606    23     6
22764  County 2021-06-06         5.0  ...  05-05015-20210606    23     6
22765  County 2021-06-06         5.0  ...  05-05017-20210606    23     6

[5 rows x 22 columns]
  Month of Date Week of Date  ...  Trips 50-100 Miles Trips 500+ Miles
0        August      Week 32  ...            19911937          4469346
1        August      Week 32  ...            17819554          4085888
2        August      Week 32  ...            17450413          3369125
3        August      Week 32  ...            17819019          1876445
4        August      Week 32  ...            17469044          4674725

[5 rows x 22 columns]
Week
0     20976.786952
1     20071.310863
2     19897.342408
3     19889.436675
6     19599.069548
7     20033.597170
23    20503.628696
24    20571.770526
25    20088.389972
4     20096.313462
5     19757.425989
8     19741.670867
9     20043.095149
10    19826.900589
11    20264.390629
14    21064.024586
12    20632.226251
13    20792.383279
15    21375.296433
16    20066.291118
17    19666.744804
18    20020.237718
19    19679.550872
20    19881.386992
21    20060.819541
22    19897.745108
26    20823.985153
27    20249.929104
28    20038.482247
29    20758.966759
30    20662.342080
31    20285.019485
32    19052.686234
33    18745.051412
34    18890.033421
35    20627.338011
36    19918.284514
37    20077.207573
38    20648.268011
39    21323.439768
40    21132.913589
41    21656.941398
44     7465.212121
42    21958.423366
43    21998.566027
Name: Population Staying at Home, dtype: float64
Week
0     51020.738855
1     52726.209223
2     52860.242509
3     52648.980772
6     53611.584988
7     53190.682538
23    62132.321631
24    61582.362854
25    70809.204896
4     52314.318396
5     53462.307864
8     54305.119116
9     55159.977776
10    60983.226516
11    66827.489237
14    71898.295496
12    71105.347453
13    70810.505768
15    72494.118997
16    71414.663350
17    71654.310548
18    68869.796804
19    68610.955192
20    69349.900449
21    70301.918206
22    72702.020437
26    70831.393691
27    74073.478271
28    74705.410133
29    75305.108160
30    76525.978519
31    74330.028676
32    74706.495889
33    74787.836240
34    74737.157863
35    75324.479441
36    76674.987907
37    77686.573245
38    76468.313657
39    76232.932941
40    76529.429488
41    75971.288899
44    32639.484848
42    72501.840025
43    70259.200391
Name: Number of Trips 10-25, dtype: float64

Process finished with exit code 0



